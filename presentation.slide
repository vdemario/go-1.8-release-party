Go 1.8 Release Party
São Paulo
16 Feb 2017

Vitor De Mario
@vdemario

* Licença

Essa apresentação é baseada na licença [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]].

Ela foi construída originalmente em inglês pelo Dave Cheney. O material original está disponível no Github:

.link https://github.com/davecheney/go-1.8-release-party

E a versão em português no fork:

.link https://github.com/vdemario/go-1.8-release-party

Pode ser modificada livremente desde que mantenha a mesma licença.

* Go 1.8

A versão 1.8 do Go está _muito_perto_ de ser lançada. É sério.

.image img/rocket.jpg _ 350

Talvez até tenha saído hoje depois que eu terminei de mexer nos slides (a esperança é a última que morre).

# .link https://groups.google.com/forum/#!topic/golang-dev/G09HaWfMl6g

A versão Go 1.8 é o nono release do Go 1, sucedendo a versão 1.7, [[https://blog.golang.org/go1.7][lançada em 16 de agosto de 2016]].

.link http://beta.golang.org/doc/go1.8 Go 1.8 Release Notes (DRAFT)

* Mudanças

Então, o que foi que aconteceu nos últimos 6 meses desde o Go 1.7?

- Performance
- Mudanças no compilador
- Mudanças na ferramenta de linha de comando
- Mudanças no runtime
- Mudanças na standard library

* Performance

* Performance

Como de hábito, é difícil dar detalhes precisos sobre performance.

A maioria dos programas deve rodar um pouco mais rápido por conta de melhorias no garbage collector e otimizações dentro da standard library.

O novo compilador, baseado em static single assignment form (SSA), gera código mais compacto e eficiente e é uma plataforma melhor para otimizações de baixo nível.

- Em ambientes ARM de 32-bits, os benchmarks diminuíram o tempo de CPU em 20-30%.
- Em sistemas x96 de 64 bits os ganhos foram mais modestos, entre 0-10%, pq o SSA já tinha sido implementado na versão 1.7.
- Outras arquiteturas provavelmente terão ganhos semelhantes ao ARM de 32 bits.

.link https://dave.cheney.net/2016/11/19/go-1-8-toolchain-improvements Post do Dave Cheney sobre melhorias nas ferramentas do Go 1.8

* Garbage Collector

Pausas de garbage collection devem ser bem menores que no Go 1.7 em geral, geralmente abaixo de 100 microsegundos e frequentemente ate 10 microsegundos.

.link https://talks.golang.org/2017/state-of-go.slide#34 Melhorias no Garbage Collector ao longo do tempo (palestra do @francesc)

O trabalho continuará pro Go 1.9.

.link https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md Eliminating Stop-The-World Stack Re-scanning (Design doc)

* Defer

O custo de chamadas de função com `defer` caiu quase pela metade.

 name           old time/op  new time/op  delta
 Defer-4        75.1ns ± 1%  43.3ns ± 1%  -42.31%   (p=0.000 n=8+10)
 
 Na realidade, isso deixa o defer 2.2x mais rápido. Os dois benchmarks
 de baixo comparam um par Lock/defer Unlock (DeferLock) com um par
 Lock/Unlock sem defer (NoDeferLock). O NoDeferLock define um custo
 base, ou seja, essa mudança reduz o overhead do defer de 61.4ns para
 27.9ns.
 
 name           old time/op  new time/op  delta
 DeferLock-4    77.4ns ± 1%  43.9ns ± 1%  -43.31%  (p=0.000 n=10+10)
 NoDeferLock-4  16.0ns ± 0%  15.9ns ± 0%   -0.39%    (p=0.000 n=9+8)

.link https://golang.org/cl/29656 Fonte: CL 29656
.link https://dave.cheney.net/2016/11/19/go-1-8-toolchain-improvements#defer Seção sobre defer no post do Dave Cheney
 
* Cgo

O custo de chamadas com cgo caiu mais que 50%:

 name       old time/op  new time/op  delta
 CgoNoop-8   146ns ± 1%    56ns ± 6%  -61.57%  (p=0.000 n=25+30)

Isso nasceu da junção de dois defers no caminho padrão das chamadas cgo.

.link https://crawshaw.io/blog/go1.8-cgo Post do David Crawshaw

* Pequenas melhorias por toda parte

Várias atualizações pequenas na standard library.

Tivemos otimizações nas implementações dos pacotes `bytes`, `crypto/aes`, `crypto/cipher`, `crypto/elliptic`, `crypto/sha256`, `crypto/sha512`, `encoding/asn1`, `encoding/csv`, `encoding/hex`, `encoding/json`, `hash/crc32`, `image/color`, `image/draw`, `math`, `math/big`, `reflect`, `regexp`, `runtime`, `strconv`, `strings`, `syscall`, `text/template`, e `unicode/utf8`.

.link http://beta.golang.org/doc/go1.8#library Link oficial de mudanças na standard library para o Go 1.8

* Mudanças no compilador

* SSA

- Todas as plataformas agora usam SSA. Backend antigo no estilo "plan9" foi deletado.
- Grandes melhorias na performance do ARM 32 bits.
- Agora é fácil de adicionar novas plataformas com SSA ("fácil" para quem trabalha com compilador). Adicionar o MIPS foi tranquilo, há humores de que vem SPARC e RISC-V pela frente.

* Novo parser

O Robert Griesemer e o Matthew Dempsky reescreveram o parser.

O novo parser remove uma boa parte das variáveis de pacote que tinham vindo do parser antigo baseado em YACC.

Essa remoção das variáveis "globais" de pacote é uma etapa na direção de deixar o compilador mais paralelo. Esse trabalho inclusive já começou em um branch.

O novo parser é considerável mais rápido, mas não teve grande impacto no 1.8 pq ele gasta tempo convertendo a AST no estilo novo para o estilo antigo que as outras partes do compilador esperam.

Essa conversão deve ser removida no Go 1.9.

Ou seja, há esperança de tempos de compilação bem melhores num futuro não muito distante.

* Velocidade do compilador

Entre 12-15% mais rápido em relação ao Go 1.7

.image https://dave.cheney.net/wp-content/uploads/2016/11/Screenshot-2016-11-19-at-08.57.10.png

* Conversão de structs

Quando se converte explicitamente de uma struct para outra, a partir do Go 1.8 as tags são ignoradas.

.play examples/struct_conversion.go /START OMIT/,/END OMIT/

* Novas plataformas

O número de plataformas suportadas pelo Go continua crescendo.

- O Go  agora suporta MIPS de 32 bits no Linux tanto para máquinas big-endian (linux/mips) quanto máquinas little-endian (linux/mipsle) que implementem o conjunto de instruções MIPS32r1 com FPU ou emulação de FPU no kernel. Note que uma boa parte dos roteadores baseados em MIPS não tem uma FPU e o firmware desabilita emulação de FPU no kernel; Go não vai rodar nessas máquinas.
- No DragonFly BSD, agora é necessário DragonFly 4.4.4 ou mais novo.
- No OpenBSD, agora é necessário OpenBSD 5.9 ou mais novo.
- O suporte a rede do Plan 9 agora é bem mais completo e tem o mesmo comportamento de Unix e Windows em relação a deadlines e cancelamentos.
- A partir do Go 1.8, só há suporte ao OS X 10.8 ou mais novo. _Essa_é_provavelmente_a_última_versão_do_Go_a_suportar_o_10.8_. Compilar e rodar binários Go em versões mais velhas do OS X não foi testado, tudo pode acontecer.

* O Go 1.8 pode ser o último a suportar ARMv5

Suporte ao ARMv5 tem sido um problema há várias versões.

No momento não há hardware para rodar os builders em ARMv5 então não se sabe se o Go 1.8 roda realmente em hardware ARMv5 real (testes são feitos no ARMv7).

Várias empresas reclamaram de perder o suporte ao ARMv5, algumas se ofereceram para rodar um builder -- mas até hoje não há um builder rodando.

Se você ou a sua empresa se importa com o ARMv5, ajude entre em contato com o Brad Fitzpatrick (@bradfitz).

.link https://github.com/golang/go/issues/17082 Proposal: runtime: drop support for linux/armv5E and linux/armv6
.link https://github.com/golang/go/wiki/DashboardBuilders Dashboard Builders (wiki)

_Se_continuar_sem_builders_de_ARMv5_não_vai_ter_suporte_no_Go_1.9_.

* Mudanças nas ferramentas de linha de comando

* go tool yacc

O yacc (antigamente disponível rodndo “go tool yacc”) foi removido. A partir do Go 1.7 ele não é mais usado pelo compilador.

O código foi movido para o repositório "tools" e agora vive em golang.org/x/tools/cmd/goyacc.

* go tool asm

`go`tool`asm` agora tem suporte a um monte de instruções vetoriais Intel e PPC.
(original: `go`tool`asm` now supports a flotilla of Intel and PPC vector instructions.)

Para sistemas x86 de 64 bits, essas instruções foram adicionadas: `VBROADCASTSD`, `BROADCASTSS`, `MOVDDUP`, `MOVSHDUP`, `MOVSLDUP`, `VMOVDDUP`, `VMOVSHDUP`, e `VMOVSLDUP`.

Para sistemas PPC de 64 bits, as instruções vetoriais escalares comuns foram adicionadas: `LXS`, `LXSDX`, `LXSI`, `LXSIWAX`, `LXSIWZX`, `LXV`, `LXVD2X`, `LXVDSX`, `LXVW4X`, `MFVSR`, `MFVSRD`, `MFVSRWZ`, `MTVSR`, `MTVSRD`, `MTVSRWA`, `MTVSRWZ`, `STXS`, `STXSDX`, `STXSI`, `STXSIWX`, `STXV`, `STXVD2X`, `STXVW4X`, `XSCV`, `XSCVDPSP`, `XSCVDPSPN`, `XSCVDPSXDS`, `XSCVDPSXWS`, `XSCVDPUXDS`, `XSCVDPUXWS`, `XSCVSPDP`, `XSCVSPDPN`, `XSCVSXDDP`, `XSCVSXDSP`, `XSCVUXDDP`, `XSCVUXDSP`, `XSCVX`, `XSCVXP`, `XVCV`, `XVCVDPSP`, `XVCVDPSXDS`, `XVCVDPSXWS`, `XVCVDPUXDS`, `XVCVDPUXWS`, `XVCVSPDP`, `XVCVSPSXDS`, `XVCVSPSXWS`, `XVCVSPUXDS`, `XVCVSPUXWS`, `XVCVSXDDP`, `XVCVSXDSP`, `XVCVSXWDP`, `XVCVSXWSP`, `XVCVUXDDP`, `XVCVUXDSP`, `XVCVUXWDP`, `XVCVUXWSP`, `XVCVX`, `XVCVXP`, `XXLAND`, `XXLANDC`, `XXLANDQ`, `XXLEQV`, `XXLNAND`, `XXLNOR`, `XXLOR`, `XXLORC`, `XXLORQ`, `XXLXOR`, `XXMRG`, `XXMRGHW`, `XXMRGLW`, `XXPERM`, `XXPERMDI`, `XXSEL`, `XXSI`, `XXSLDWI`, `XXSPLT`, e `XXSPLTW`.

* go tool trace

A ferramenta `trace` agora tem uma flag `-pprof` para produzir profiles de bloqueio e latência compatíveis com o pprof a partir de um trace.

Eventos de garbage collection aparecem mais claramente no visualizador.

Atividade do garbage collector aparece na sua própria linha e rotinas helper do GC são anotadas com seus papéis (roles).

.link https://www.youtube.com/watch?v=mmqDlbWk_XA Apresentação do Rhys Hiltner no dotGo 2016 sobre o execution tracer

* go tool vet

O vet agora é maie estrito em algumas coisas e mais frouxo onde ele antes causava falsos positivos. O vet agora verifica:

- copiar um array de locks
- struct tags JSON e XML duplicadas
- struct tags que não estão separadas por espaço
- chamar com defer ao `Response.Body.Close` do HTTP antes de checar o erro
- argumentos indexados no `Printf`.

.code examples/vet_repeated_json_tags.go

.play examples/govet.sh /go tool/

* go fix

O `go`fix` agora muda automaticamente referências ao `golang.org/x/net/context` pelo pacote `context` da standard library.

* go bug

O novo comando `go`bug` abre um novo bug report no GitHub, pré-preenchido com as informações do sistema.

Example:

.play examples/gobug.sh /go bug/

* $GOPATH padrão

Não é mais necessário definir um `$GOPATH` antes de usar o comando `go`.

Quando o `$GOPATH` não é definido, usa-se:

- `$HOME/go` no Unix
- `%USERPROFILE%\go` no Windows

Se esses padrões não te agradam, continue setando o `$GOPATH` para o seu local preferido.

* Mudanças no runtime

* Profile de contenção de mutex

Peter Wienberger adicionou um novo profile ao pprof, contenção de mutex.

.code examples/mutex_test.go /testing.B/,/^}/


_nota_: Por acidente isso só funciona com `sync.Mutex`, não `sync.RWMutex`, o que vai ser corrigido no Go 1.9.

.link https://github.com/golang/go/issues/18496 issue sobre o assunto no github

* Profile de contenção de mutex

    % go test examples/mutex_test.go -bench=. -mutexprofile=mutex.out
    % go tool pprof mutex.test mutex.out
    (pprof) list
    Total: 290.81ms
    ROUTINE ======================== command-line-arguments.(*Map).Put in /Users/dfc/devel/go-1.8-release-party/examples/mutex_test.go
         0   290.81ms (flat, cum)   100% of Total
         .          .      9:}
         .          .     10:
         .          .     11:func (m *Map) Put(key string, val int) {
         .          .     12:   m.Lock()
         .          .     13:   m.m[key] = val
         .   290.81ms     14:   m.Unlock()
         .          .     15:}
         .          .     16:
         .          .     17:func BenchmarkMutex(b *testing.B) {
         .          .     18:   const N = 16
         .          .     19:   for n := 0; n < b.N; n++ {

* Plugins

O Go agora tem suporte a um modo de compilação de "plugins" para gerar plugins escritos em Go, com um novo pacote `plugin` para carregar esses plugins em tempo de execução.

Suporte a plugins por enquanto só está disponível no Linux.

Mais detalhes na próxima apresentação.

* os.Executable

`os.Executable` retorna o caminho absoluto do programa que está rodando agora.

.play examples/os_executable.go /START OMIT/,/END OMIT/

`Executable` retona o path do executável que iniciou o processo atual. Não há garantia que esse path ainda esteja apontando pro executável certo.

Se um link simbólico foi usado pra iniciar o processo, dependendo do sistema operacional, o resultado pode ser o link ou o path que o link aponta. Caso um resultado estável seja necessário, pode-se usar path/filepath.EvalSymlinks.

.link http://beta.golang.org/pkg/os/#Executable os.Executable (godoc.org)

* Detecção de acesso a concorrente a maps

No Go 1.6, o runtime adicionou [[http://talks.godoc.org/github.com/davecheney/gosyd/go1.6.slide#18][uma tentativa best-effort de detectar o uso incorreto de maps concorrentemente]]. O Go 1.8 melhora essa detecção encontrando programas que escrevem em um mapa e iteram sobre ele ao mesmo tempo concorrentemente.

.play examples/maps.go /func main/,/^}/

Quando o runtime detecta isso, ele imprime um diagnóstico e crasha o programa.

* Mudanças na standard library

* sort.Slice

O pacote `sort` agora tem um método extremamente conveniente `sort.Slice`

.code examples/sort.go /switch.+{/,/^\t}/

* HTTP: Graceful shutdown

Pedido antigo: o graceful shutdown de um `http.Server` foi adicionado no Go 1.8.

Chame o `Shutdown` quando um sinal for recebido:

.code examples/shutdown.go /main\(\) {/,/^}

* HTTP/2

O `http.Response` agora satisfaz a interface  `http.Pusher`.

    type Pusher interface {
        Push(target string, opts *PushOptions) error
    }

* Mais suporte a context

Continuando a adoção do `context.Context` na standard library que começou pelo Go 1.7, o 1.8 adiciona mais suporte em diversos pacotes:

- A nova função `Server.Shutdown` aceita um context como argumento.
- Adições significativas ao `database/sql` com suporte a context.
- Todos os nove métodos `Lookup` no novo `net.Resolver` aceitam um context.

* Pequenas mudanças

.link http://beta.golang.org/doc/go1.8#minor_library_changes Lista completa de pequenas mudanças na standard library

* O que vem pela frente no Go 1.9

* O que vem pela frente no Go 1.9

Antes de encerrar, uma pequena passagem pelo que está sendo feito pro Go 1.9.

_nota_: Tudo isso é especulação, nada está escrito na pedra até o código entrar oficialmente.

* Alias

Depois de um rollback antes do freeze do Go 1.8, a proposta de alias está sendo refeita pro Go 1.9 em um formato mais limitado.

.link https://golang.org/design/18130-type-alias

.play -edit examples/alias.go

* runtime.MemStats mais rápido / barato

O custo de chamar o `runtime.MemStats` é proporcional ao tamanho do heap; Austin Clements recentemente mediu isso em ~1.7ms por Gb.

Tem uma CL pronta pra entrar que reduz isso a 20 us por proc (thread servindo uma goroutine) que é um limite superior bem mais baixo.

O stop-the-world do garbage collector acontece aqui, o que é relevante.

.link https://golang.org/issue/13613

* Ferramenta de gerenciamento de dependências oficial

Chegou a hora!

Peter Bourgon, Sam Boyer, Jess Frazelle, e Steve Francia estão trabalhando em uma ferramenta _official_ de gerenciamento de dependências chamada `dep`.

Se você está acostumado com o glide ou o govendor, vai ser familiar.

.link https://groups.google.com/forum/#!topic/go-package-management/et1qFUjrkP4 Anúncio

Ainda é considerada _pré_alfa_ no momento, mas todo mundo está encorajado a dar uma olhada e já começar a opinar em issues e PRs, vai virar realidade.

.link https://github.com/golang/dep

* Conclusão

.image img/party-gopher.png

Atualizem para o Go 1.8, desde já!

É literalmente a melhor versão do Go.
